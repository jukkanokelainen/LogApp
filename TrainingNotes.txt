initialisointi
1. luo kansio c:/react/itlogger
2. aja tuossa kansiossa npx create-react-app
3. aja tuossa kansiossa jsonserverin ja concurrentlyn asennus:
   npm i -D json-server concurrently 
   -D tarkoittaa devDependencies

json-serverin konfigurointi:
1. luo juureen file db.json
sinne sisällöksi json, jossa keyt "logs" ja "techs", jotka ovat siis arrayt. Näiden sisälle json muotoiset mallidatat.
2. Konfiguroidaan script, joka kertoo mitä filea jsonserver käyttää ja missä portissa sen endpoint:
2.a: packages.json-tiedoston scripts-osioon:
"json-server":"json-server --watch db.json --port 5000"

concurrentlyn konfigurointi:
1. packagers-json-tiedostoon scripts-osioon:
"dev":"concurrently \"npm start\" \"npm run json-server\"",
2. näin ollen appi käynnistyy ajamalla komento "npm run dev"

proxyn konfigurointi ettei tarvitse kirjoittaa clienttiin localhost yms...
1. packages.json-tiedostoon uusi key "proxy":
"proxy": "http://localhost:5000"



Materializen asennus ja initialisointi:
1: asennetaan käyttäen npm:
npm i materialize-css
2: importit (app.js):
import 'materialize-css/dist/css/materialize.min.css'
import M from 'materialize-css/dist/js/materialize.min.js'
3. Materializen toiminnot, ainakin modal pitää initialisoida. Yksinkertaisin vaihtoehto on käyttää
auto init-toimintoa,
  3.a: app.js tuodaan useEffect
  3.b: app.js:ssä useEffectin sisällä ajetaan funktio M.autoInit();
4. Ikonit initialisoidaan kopioimalla linkki index.html-tiedostoon dokumentaatiosta
 <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">


REDUX
npm i redux react-redux redux-thunk redux-devtools-extension
react-redux auttaa yhdistämään reduxin reactiin
redux-thunk on middleware, jolla voidaan tehdä asynkronisia toimenpiteitä.
jotta voi käyttää devtoolsia, se pitää implementoida koodissa. readux-devtools-
extensio auttaa tuon implementoinnissa.

file structure:
src-kansioon file store.js

import {createStore, applyMiddleware} from 'redux'
import {composeWithDevTools} from 'redux-devtools-extension'
...etc

CONNECT COMPONENT TO REDUX
tuodaan componenttiin import connect from react-redux
exportissa käytetään connect ja 
mapstatetoProps jolla saadaan staten sisältö käyttöön componentein propsiin.
Lisäksi toiseksi conncetin parametriksi laitetaan actionit, jotka halutaan tuoda
componentin propseihin. ko. action pitää importata käyttöön ensin.
Sitten componentin sisällä näitä staten osia tai actioneita voidaan käyttää
esim props.getLogs, props.log.logs:

const mapStateToProps = state => ({
  log: state.log 
})

export default connect(mapStateToProps, {getLogs})(Logs)